{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","recorder","stream","useState","recordDisabled","setRecordDisabled","downloadBlob","blob","name","blobUrl","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","dispatchEvent","MouseEvent","bubbles","cancelable","view","window","removeChild","a","navigator","mediaDevices","getDisplayMedia","video","audio","MediaRecorder","mimeType","audioBitsPerSecond","getTracks","forEach","track","addEventListener","getAudioTracks","stop","chunks","ondataavailable","e","push","data","onstop","console","log","Blob","type","onerror","start","className","disabled","id","onClick","startRecording","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iRAsHeA,MAjHf,WAEE,IAEIC,EAAUC,EAFd,EAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAwCF,oBAAS,GAAjD,mBAGA,SAASG,EAAaC,GAA2B,IAArBC,EAAoB,uDAAb,YAE3BC,EAAUC,IAAIC,gBAAgBJ,GAG9BK,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAON,EACZG,EAAKI,SAAWR,EAChBK,SAASI,KAAKC,YAAYN,GAG1BA,EAAKO,cACH,IAAIC,WAAW,QAAS,CACtBC,SAAS,EACTC,YAAY,EACZC,KAAMC,UAKVX,SAASI,KAAKQ,YAAYb,GA1Bf,4CA8Bb,4BAAAc,EAAA,+EAEmBC,UAAUC,aAAaC,gBACpC,CACEC,OAAO,EAMPC,OAAM,IAVd,OAEI7B,EAFJ,OAaID,EAAW,IAAI+B,cAAc9B,EAAQ,CAAC+B,SAAU,6BAA8BC,mBAAqB,QAOnGhC,EAAOiC,YAAYC,SAAQ,SAACC,GAAD,OAC3BA,EAAMC,iBAAiB,SAAS,WAC9BpC,EAAOqC,iBAAiBH,SAAQ,SAACL,GAAD,OAAWA,EAAMS,UAC7CvC,GAAUA,EAASuC,OACvBvC,EAAW,WAOPwC,EAAS,GACfxC,EAASyC,gBAAkB,SAAAC,GAAC,OAAIF,EAAOG,KAAKD,EAAEE,OAC9C5C,EAAS6C,OAAS,SAAAH,GACdI,QAAQC,IAAI,QAEZ1C,EADqB,IAAI2C,KAAKR,EAAQ,CAAES,KAAMT,EAAO,GAAGS,OAC7B,aAC3B7C,GAAkB,IAEtBJ,EAASkD,QAAU,SAACR,GAAD,OAAOI,QAAQC,IAAIL,IAEtC1C,EAASmD,QAzCb,kDA8CIL,QAAQC,IAAI,gBA9ChB,2DA9Ba,sBAuGb,OApGA,UAqGE,qBAAKK,UAAU,MAAf,SACE,qBAAKA,UAAU,eAAf,SACE,wBAAQ7C,KAAK,SAAS8C,SAAUlD,EAAgBmD,GAAG,SAASC,QAxBlE,WACEnD,GAAkB,GAnFP,mCAqFXoD,IAqBI,yBCnGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASyD,eAAe,SAM1BZ,M","file":"static/js/main.44a50896.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\n\n\nfunction App() {\n\n  const [recordDisabled, setRecordDisabled] = useState(false)\n  const [stopDisabled, setStopDisabled] = useState(true)\n  let recorder, stream;\n\n  function downloadBlob(blob, name = 'video.mp4') {\n    //El siguiente metodo es experimental segun MDN, pero funciona en todos los navegadores modernos aparentemente\n    const blobUrl = URL.createObjectURL(blob);\n  \n    // Creamos un anchor para poder hacer la descarga\n    const link = document.createElement(\"a\");\n    link.href = blobUrl;\n    link.download = name;\n    document.body.appendChild(link);\n  \n    // Click en el anchor tag\n    link.dispatchEvent(\n      new MouseEvent('click', { \n        bubbles: true, \n        cancelable: true, \n        view: window \n      })\n    );\n  \n    // Quitamos el anchor\n    document.body.removeChild(link);\n  }\n\n\n  async function startRecording() {\n    try{\n      stream = await navigator.mediaDevices.getDisplayMedia(\n        {\n          video: true,\n          //TO-DO\n          //Por alguna razon, cuando activamos que se pueda capturar el audio\n          // el metodo onstop del recorder (se crea mas abajo) no se llama correctamente,\n          // por lo que no se realiza la descarga\n\n          audio:true\n        }\n      );\n      recorder = new MediaRecorder(stream, {mimeType: 'video/webm;codecs=vp8,opus', audioBitsPerSecond : 128000});\n\n      //Esta porcion de codigo aÃ±ade un event listener para detener el record de audio\n      // ya que al dejar de compartir, el audio seguia grabandose y por eso nunca se llamaba al metodo \n      // recorder.onstop()   (Todo un dia para esta solucion de mie***)\n      //GRACIAS >> https://stackoverflow.com/questions/61975745/mediarecorder-api-recorder-wont-call-onstop-when-recording-multiple-tracks/61978229#61978229?newreg=d2aeda545b344b8480dd5e3b5eb17bbf\n\n      stream.getTracks().forEach((track) =>\n      track.addEventListener(\"ended\", () => {\n        stream.getAudioTracks().forEach((audio) => audio.stop());\n        if (recorder) recorder.stop();\n        recorder = null;\n        })\n      );\n\n      //-------------------------------- \n\n      \n      const chunks = [];\n      recorder.ondataavailable = e => chunks.push(e.data);\n      recorder.onstop = e => {\n          console.log(\"Done\")\n          const completeBlob = new Blob(chunks, { type: chunks[0].type });\n          downloadBlob(completeBlob, \"video.mp4\");\n          setRecordDisabled(false);\n      };\n      recorder.onerror = (e) => console.log(e)\n    \n      recorder.start();\n    }\n\n\n    catch(err){\n      console.log(\"Error: \" + err)\n    }\n\n  }\n\n\n  function handleRecord(){\n    setRecordDisabled(true);\n    //setStopDisabled(false);\n    startRecording();\n  }\n\n  /*function handleStop(){\n    setRecordDisabled(false);\n    setStopDisabled(true);\n\n    try{\n      recorder.stop();\n      stream.getVideoTracks()[0].stop();\n    }\n    catch(err){\n      console.log(err)\n    }\n\n  }*/\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"btnContainer\">\n        <button name=\"record\" disabled={recordDisabled} id=\"record\" onClick={handleRecord}>RECORD</button>\n        {/*<button name=\"stop\" disabled={stopDisabled} id=\"stop\" onClick={handleStop}>STOP</button>*/} \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}